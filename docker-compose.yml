
#############################################################################################################
# Start your application services by typing at the Docker CLI:
#     ~$> docker-compose -f <"a unique name">.docker-compose.yml up -d
# Shutdown services with the Docker CLI command:
#     ~$> docker-compose -f  <"a unique name">.docker-compose.yml down --remove-orphans
#     The "--remove-orphans" flag is used to remove any child container instances that may have been created
# Build, remove orphaned containers and refresh services:
#     ~$> docker-compose -f docker-compose.yml up --always-recreate-deps --renew-anon-volumes --remove-orphans --force-recreate -d --build
#############################################################################################################
version: '3.8'
services:
  # node backend service
  frontend:
    build:
      context: .devcontainer
      dockerfile: frontend.Dockerfile
      args:
        HOSTNAME: ${HOSTNAME}
        USER: ${USERNAME}
        CERTS_DIR: ${CERTS_DIR}
        UUID: ${UUID}
        PORT: ${PORT}
        WORKDIR: /home/${USERNAME}/app
        VERSION: 18
    container_name: frontend
    user: ${USERNAME}
    hostname: ${HOSTNAME}
    working_dir: /home/${USERNAME}/app
    env_file:
      - .devcontainer/frontend.env
    volumes:
      - ./frontend/:/home/${USERNAME}/app/
      - .devcontainer/certs/.certs:/usr/local/app/.certs
    expose:
      - ${PORT}
    ports:
      - ${PORT}:${PORT}
#    links:
#      - backend
    networks:
      resume-network:
  # mongodb service
#  backend:
#    image: mongo:6.0.2
#    container_name: backend
#    restart: always
#    env_file:
#      - .devcontainer/backend.env
#    volumes:
#      - mongodb-volume:/data
#    expose:
#      - "27017"
#    ports:
#      - "27017:27017"
#    networks:
#      resume-network:
# Define application network
networks:
  resume-network:
    driver: bridge
    ipam:
      driver: default
# Define mongodb volume
#volumes:
#  mongodb-volume: null

