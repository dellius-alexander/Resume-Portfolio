
#############################################################################################################
# Start your application services by typing at the Docker CLI:
#     ~$> docker-compose -f <"a unique name">.docker-compose.yml up -d
# Shutdown services with the Docker CLI command:
#     ~$> docker-compose -f  <"a unique name">.docker-compose.yml down --remove-orphans
#     The "--remove-orphans" flag is used to remove any child container instances that may have been created
# Build, remove orphaned containers and refresh services:
#     ~$> docker-compose -f docker-compose.yml up --always-recreate-deps --renew-anon-volumes --remove-orphans --force-recreate -d --build
#############################################################################################################
version: '3.8'
services:
  # node backend service
  resume-frontend:
    build:
      context: ./docker
      dockerfile: Dockerfile
    container_name: frontend
    user: 'node'
    hostname: "example.com"
    working_dir: /home/node/app
    env_file:
      - frontend.env
    volumes:
      - ./:/home/node/app
    expose:
      - '443'
    ports:
      - '443:443'
    command:
      - /bin/sh
      - -c
      - |
        sh -c "npm install" && 
        sh -c "npm start" && 
        sh -c "echo Environment: ${NODE_ENV}"

    links:
      - resume-backend
    networks:
      resume-network:
  # mongodb service
  resume-backend:
    image: mongo:6.0.2
    container_name: backend
    restart: always
    env_file:
      - backend.env
    volumes:
      - mongodb-volume:/data
    expose:
      - "27017"
    ports:
      - "27017:27017"
    networks:
      resume-network:
# Define application network
networks:
  resume-network:
    driver: bridge
    ipam:
      driver: default
# Define mongodb volume
volumes:
  mongodb-volume: null

